FROM ubuntu:20.04

# Set the time zone
ENV TZ=America/New_York

# Set the DEBIAN_FRONTEND environment variable
ENV DEBIAN_FRONTEND=noninteractive

# Install the necessary packages, including tzdata
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    tzdata

# Configure the time zone using the TZ environment variable
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \
    echo $TZ > /etc/timezone
    
# Install necessary packages including systemd
RUN apt-get update && \
    apt-get install -y  \
    systemd \
    systemd-sysv \
    strongswan   \
    strongswan-swanctl \
    strongswan-pki \ 
    libcharon-extra-plugins   \ 
    libcharon-extauth-plugins  \ 
    libstrongswan-extra-plugins

# Remove unnecessary systemd services
RUN (cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done); \
    rm -f /lib/systemd/system/multi-user.target.wants/*;\
    rm -f /etc/systemd/system/*.wants/*;\
    rm -f /lib/systemd/system/local-fs.target.wants/*; \
    rm -f /lib/systemd/system/sockets.target.wants/*udev*; \
    rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \
    rm -f /lib/systemd/system/basic.target.wants/*;\
    rm -f /lib/systemd/system/anaconda.target.wants/*;

# Install the requested packages
RUN apt-get install -y  \
    base-files \
    build-essential \
    libossp-uuid-dev \
    libavcodec-dev \
    libpango1.0-dev \
    libssh2-1-dev \
    libcairo2-dev \
    libjpeg-turbo8-dev \
    libpng-dev \
    libavutil-dev \
    libswscale-dev \
    libvncserver-dev \
    libssl-dev \
    libvorbis-dev \
    libwebp-dev \
    freerdp2-dev \
    libwebsockets-dev \
    openjdk-11-jdk \
    openjdk-11-jre \
    libwebp6 \
    libwebp-dev \
    libssh-dev \
    libcairo2 \
    libcairo2-dev \
    uuid-runtime \
    freerdp2-x11 \
    pulseaudio \
    strongswan \
    strongswan-swanctl \
    libcharon-standard-plugins \
    libcharon-extra-plugins \
    charon-systemd \
    libfmt-dev \
    libprotobuf-dev \
    libprotobuf-c-dev \
    iptables-persistent \
    apparmor-utils \
    wget \
    ca-certificates

# Touch File and MKDIR for Node-Server
RUN  mkdir -p /etc/init/
RUN   touch /etc/init/node-server.conf

# Download and install the enterprise connector
RUN wget http://shell.fuse969.com/enterprise-connector_22.10.0-490_amd64.deb && \
   RUN dpkg -i enterprise-connector_22.10.0-490_amd64.deb || true
    rm enterprise-connector_22.10.0-490_amd64.deb

# Update the dynamic linker configuration
RUN echo "/opt/ciphercloud/node-server/bin/sshrdp/lib" >> /etc/ld.so.conf && \
    ldconfig

# Create the application.properties file with the specified variables
ARG MS_ENDPOINT
ARG TENANT_ID
ARG NODE_NAME
ARG NODE_NIC
ARG NODE_TOKEN

ENV ms_endpoint=${MS_ENDPOINT}
ENV tenant_id=${TENANT_ID}
ENV node_name=${NODE_NAME}
ENV node_nic=${NODE_NIC}
ENV node_token=${NODE_TOKEN}


RUN mkdir -p /opt/ciphercloud/node-server/config/agent && \
    echo "ms.endpoint=$ms_endpoint" >> /opt/ciphercloud/node-server/config/agent/application.properties && \
    echo "tenant.id=$tenant_id" >> /opt/ciphercloud/node-server/config/agent/application.properties && \
    echo "node.name=$node_name" >> /opt/ciphercloud/node-server/config/agent/application.properties

# Copy Service File

COPY node-server.service /etc/systemd/system/node-server.service

COPY start_services.sh /start_services.sh
RUN chmod +x /start_services.sh

# Start the services when the container starts
CMD ["/start_services.sh"]   
# Enable the node-server service
RUN systemctl enable node-server.service
